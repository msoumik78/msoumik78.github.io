---
layout: post
title:  "Let's quickly learn MongoDB"
date:   2017-08-24 16:55:23 +0530
categories: NoSQL
---

# MongoDB

MongoDB
is one of the most popular document oriented databases which is a major type of NoSQL database.  The document oriented databases closely resemble RDBMS in the sense that the data is stored in form of documents (which are similar to rows in RDBMS) and the 
documents are stored in collections (which are similar to tables in RDBMS). **The biggest difference with RDBMS is that the documents are indeed meant for storing semi structured data and also the documents are completely schema free. This means that in MongoDB
you can go ahead and store documents in collections without even creating the collection in the first place.** 

This also means that MongoDb insert operations are much faster than corresponding insert operations of RDBMS.


## Typical CRUD syntax in MongoDB

Following are the useful CRUD commands of MongoDB: 
* db.collectionName.find () : This is the command to fetch documents from MongoDB abd its 
{% highlight ruby %}

// First query below finds employees with title Gupta and second query finds employees who are managers
// Sql equivalent of the first query: Select * from employees where title = "Gupta"
// Sql equivalent of the second query: Select * from employees where designation = "Manager"
db.employees.find("title":"Gupta") 
db.employees.find("designation":"Manager")
 

// One can also select specific columns instead of all columns 
// Sql equivalent : Select name, age from employees where title = "Gupta"
db.employees.find("title":"Gupta" , {name: 1, age:1}) 

// One can also limit specific rows 
// Sql equivalent : Select name, age from employees where title = "Gupta" LIMIT 5
db.employees.find("title":"Gupta" , {name: 1, age:1}).limit(5) 

// One can also sort the output 
// Sql equivalent : Select * employees order by title ASC name DESC
db.employees.find.sort("title":"1" , "name" : "-1") 

{% endhighlight %}

* db.collectionName.insert() - Following are some code snippets:

{% highlight ruby %}

// First one below is a single insert statement and the second one is a multi insert (batch insert)
db.employees.insert({name:"Soumik",age:"40", specialities: ["java", "NoSql", "AWS"], physique: {height:"170", weight:"70"} }) 
db.employees.insertMany([
{name:"Rahul",age:"34", specialities: ["java"], physique: {height:"170", weight:"70"} },
{name:"Agni",age:"30", specialities: ["NoSql"], physique: {height:"170", weight:"70"} },
{name:"Suny",age:"38", specialities: ["NoSql"], physique: {height:"170", weight:"70"} }
 ])
 
// Speciality of MongoDB is that it allows one to store the following data in a cell:
// a) Single value (just like RDBMS) , b) An array of values (within a [] bracket) like the 'specialities' column above , c) a nested structure 
// which is like the 'physique' column above
// Below is the MongoDB find statement which finds out all employees with height greater than 150
// See how a nested field 'physique' is referenced using the dot notation
db.employees.find({ "physique.height" : { $gt: 150 }}) 
 
{% endhighlight %}
 
* db.collectioName.update(, $set ) - First argument is used to identify the document and second argument after $set to set the data.
{% highlight ruby %}

// Update query which sets the age of employee named Soumik to make his age 41 
db.employees.update({name:"Soumik"},{$set: {age: "41"} }}) 

{% endhighlight %}

* db.collectionName.remove()


## Some other useful features and commands of MongoDB


## MongoDB Replication & Sharding

One of the most attractive features of MongoDB is the ease with which one can divide and distribute the data into multiple nodes (known as sharding) and how each part of the data (known as shard) can be duplicated (known as replication).  
Below are very simple steps to create a sharded cluster in MongoDB
* First start mongod process in 3 machines (using the command : mongod -host <HostName> - port 27017 – replySet <ReplicaSetName> 
  Note that 'ReplicaSetName' should be same in all the 3 machines and that's how it can recognize that all 3 are part of the same replica set.
* Then connect a mongo process to any one instance and issue the commands (rs.initialize() and 
  then rs.add <Second Server> and rs.add <Third Server>
   The first command (rs.initialize()) initializes the replica set cluster of MongoDB and the second and third commands respectively add the second and third servers to the cluster.  
  * After that, start the 3 config servers with the command (mongod – configServr -replySet <ReplicaSetName>
  * After that start the mongos instance using the command (mongos -configdb ConfigDb1:ConfigDB2:ConfigDB3)
  * After that , start a mongo process and connect to the mongos instance and issue the command 
    (sh.addShard  (rs1/ReplicaInatance1:ReplicaInstance2:ReplicaInatance3)

This completes the setup of a sharded replica set of MongoDB.
